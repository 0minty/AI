from lib import *


async def base():
    async with aiosqlite.connect('base.db') as conn:
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            lang TEXT
        )
        ''')
        await conn.commit()


bot = Bot(token_tg, default=DefaultBotProperties(parse_mode='html'), request_timeout=60)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

sticker = 'CAACAgIAAxkBAAENcX5neP0tad22z4LYMZ67O-ARd-jUbwACBQADwDZPE_lqX5qCa011NgQ'
start_text = '–Ø AI –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã—É—á–∏—Ç—å –∏–ª–∏ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º! '

languages = [
    {"en": "üá∫üá∏–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"},
    {"ru": "üá∑üá∫–†—É—Å—Å–∫–∏–π"},
    {"fr": "üá´üá∑–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"},
    {"tr": "üáπüá∑–¢—É—Ä–µ—Ü–∫–∏–π"},
    {"de": "üá©üá™–ù–µ–º–µ—Ü–∫–∏–π"},
    {"it": "üáÆüáπ–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"},
    {"pt": "üáµüáπ–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"}
]


class FMSuser(StatesGroup):
    mes = State()
    user_gen = State()
    user_check_response = State()
    user_check_response_generate = State()


async def first(user_id):
    async with aiosqlite.connect('base.db') as conn:
        await conn.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        await conn.commit()


@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    async with aiosqlite.connect('base.db') as conn:
        user_id = message.from_user.id
        await first(user_id)
        cursor = await conn.cursor()
        await cursor.execute("SELECT lang FROM users WHERE user_id = ?", (user_id,))
        user_lang = await cursor.fetchone()
        if user_lang[0]:
            kb = [
                [types.InlineKeyboardButton(text='‚ú®–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É', callback_data='grammar')],
                [types.InlineKeyboardButton(text='üîÑ–°–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫', callback_data='change_lang')]
            ]
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
            await bot.send_sticker(message.chat.id, sticker=sticker)
            await cursor.execute("SELECT lang FROM users WHERE user_id = ?", (user_id,))
            user_lang = await cursor.fetchone()
            for lang in languages:
                if user_lang[0] in lang:
                    lang_user = lang[user_lang[0]]
            old_mes = await bot.send_message(message.chat.id,
                                             text=f'{start_text}\n\n–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω: <b>{lang_user}</b> —è–∑—ã–∫.',
                                             reply_markup=keyboard)
            await state.update_data(mes=old_mes)
        else:
            kb = [[types.InlineKeyboardButton(text=lang[next(iter(lang))], callback_data=f'lang_{next(iter(lang))}')]
                  for lang in languages]
            keyboard_lang = types.InlineKeyboardMarkup(inline_keyboard=kb)

            await bot.send_sticker(message.chat.id, sticker=sticker)
            old_mes = await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å',
                                             reply_markup=keyboard_lang)
            await state.update_data(mes=old_mes)


@dp.callback_query(F.data.startswith('lang_'))
async def select_language(callback: types.CallbackQuery, state: FSMContext):
    kb = [
        [types.InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='back')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    lang_code = callback.data.split('_')[1]
    user_id = callback.from_user.id
    async with aiosqlite.connect('base.db') as conn:
        await conn.execute("UPDATE users SET lang = ? WHERE user_id = ?", (lang_code, user_id))
        await conn.commit()

    selected_lang = next(lang[lang_code] for lang in languages if lang_code in lang)
    data = await state.get_data()
    old_mes = data.get('mes')
    old_mes = await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=old_mes.message_id,
                                          text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: <b>{selected_lang}</b>. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ!",
                                          reply_markup=keyboard)
    await state.update_data(mes=old_mes)
    await callback.answer()


@dp.callback_query(F.data == 'change_lang')
async def change_languages(callback: types.CallbackQuery, state: FSMContext):
    kb = [[types.InlineKeyboardButton(text=lang[next(iter(lang))], callback_data=f'lang_{next(iter(lang))}')]
          for lang in languages]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    data = await state.get_data()
    old_mes = data.get('mes')
    old_mes = await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=old_mes.message_id,
                                          text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å',
                                          reply_markup=keyboard)
    await state.update_data(mes=old_mes)
    await callback.answer()


@dp.callback_query(F.data == 'grammar')
async def generate_grammar(callback: types.CallbackQuery, state: FSMContext):
    kb = [
        [types.InlineKeyboardButton(text='üí°–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='check_task')],
        [types.InlineKeyboardButton(text='‚úÖ–í—ã–ø–æ–ª–Ω–∏–ª(–∞)', callback_data='back')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    data = await state.get_data()
    old_mes = data.get('mes')
    old_mes = await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=old_mes.message_id,
                                          text='‚ú®–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...')
    await state.update_data(mes=old_mes)
    user_id = callback.from_user.id
    async with aiosqlite.connect('base.db') as conn:
        cursor = await conn.cursor()
        await cursor.execute("SELECT lang FROM users WHERE user_id = ?", (user_id,))
        user_lang = await cursor.fetchone()
        for lang in languages:
            if user_lang[0] in lang:
                lang_user = lang[user_lang[0]]
        response_text = f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏–¥—É–º–∞–π –º–Ω–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏–∑ 5 –ø—É–Ω–∫—Ç–æ–≤ –∏ –≤—ã–¥–µ–ª–∏ –∏—Ö –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –Ω–∞ {lang_user} —è–∑—ã–∫–µ."

        ai_response = await generate_ai(response_text=response_text)
        await state.update_data(user_check_response=ai_response)
        processed_response = '\n'.join([
            f"<code>{line.lstrip('```').strip()}</code>" if line.strip().startswith('```') else
            f"<b>{line.replace('*', '').strip()}</b>" if '**' in line or '*' in line else
            f"<i>{line.lstrip('#').strip()}</i>" if line.strip().startswith('###') else
            line
            for line in ai_response.split('\n')
        ])
        try:
            old_mes = await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=old_mes.message_id,
                                                  text=processed_response, reply_markup=keyboard)
            await state.update_data(mes=old_mes)
        except Exception as e:
            old_mes = await bot.send_message(chat_id=callback.message.chat.id,
                                             text=processed_response, reply_markup=keyboard)
            await state.update_data(mes=old_mes)
        await callback.answer()


@dp.callback_query(F.data == 'check_task')
async def check_user_task(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    kb = [
        [types.InlineKeyboardButton(text='‚ùå–û—Ç–º–µ–Ω–∞', callback_data='back')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    old_mes = data.get('mes')
    old_mes = await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=old_mes.message_id,
                                          text='üìù–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç):',
                                          reply_markup=keyboard)
    await state.update_data(old_mes=old_mes)
    await state.set_state(FMSuser.user_check_response_generate)


@dp.message(FMSuser.user_check_response_generate)
async def check_user_task_ai(message: types.Message, state: FSMContext):
    kb = [
        [types.InlineKeyboardButton(text='‚úÖ–í—ã–ø–æ–ª–Ω–∏–ª(–∞)', callback_data='back')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    data = await state.get_data()
    old_mes = data.get('mes')
    task_message = message.text
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=old_mes.message_id, text='‚ú®–ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–¥–∞–Ω–∏–µ...')
    await state.update_data(old_mes=old_mes)
    user_ai_check = data.get('user_check_response')
    print(f'_____________________\n{user_ai_check}\n_______________________')
    mes = await generate_ai(
        f'–ü—Ä–æ–≤–µ—Ä—å –º–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ—è—Å–Ω–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º. –í–æ—Ç –∑–∞–¥–∞–Ω–∏–µ: {user_ai_check}\n –ú–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: {task_message}')
    processed_response = '\n'.join([
        f"<code>{line.lstrip('```').strip()}</code>" if line.strip().startswith('```') else
        f"<b>{line.replace('*', '').strip()}</b>" if '**' in line or '*' in line else
        f"<i>{line.lstrip('#').strip()}</i>" if line.strip().startswith('###') else
        line
        for line in mes.split('\n')
    ])
    await bot.edit_message_text(chat_id=message.chat.id, message_id=old_mes.message_id, text=f'{processed_response}',
                                reply_markup=keyboard)
    await state.update_data(old_mes=old_mes)
    await state.set_state()


@dp.callback_query(F.data == 'back')
async def back_menu(callback: types.CallbackQuery, state: FSMContext):
    async with aiosqlite.connect('base.db') as conn:
        user_id = callback.from_user.id
        cursor = await conn.cursor()
        data = await state.get_data()
        old_mes = data.get('mes')
        await cursor.execute("SELECT lang FROM users WHERE user_id = ?", (user_id,))
        user_lang = await cursor.fetchone()
        for lang in languages:
            if user_lang[0] in lang:
                lang_user = lang[user_lang[0]]
        if user_lang[0]:
            kb = [
                [types.InlineKeyboardButton(text='‚ú®–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É', callback_data='grammar')],
                [types.InlineKeyboardButton(text='üîÑ–°–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫', callback_data='change_lang')]
            ]
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
            old_mes = await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=old_mes.message_id,
                                                  text=f'{start_text}\n\n–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω: <b>{lang_user}</b> —è–∑—ã–∫.',
                                                  reply_markup=keyboard)
            await state.set_state()
            await state.update_data(mes=old_mes)
            await callback.answer()


@dp.message(FMSuser.user_gen)
async def stop_mes(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    old_mes = await bot.send_message(chat_id=message.chat.id, text='‚ùóÔ∏è–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
    await state.update_data(mes=old_mes)


@dp.message(Command('us'))
async def adm_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in ID_ADM:
        async with aiosqlite.connect('base.db') as conn:
            cursor = await conn.cursor()
            await cursor.execute('SELECT COUNT(user_id) FROM users')
            result = await cursor.fetchone()
            count = result[0]
            await bot.send_message(message.chat.id, f'–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}')


@dp.message()
async def generate_response(message: types.Message, state: FSMContext):
    async with aiosqlite.connect('base.db') as conn:
        await state.set_state(FMSuser.user_gen)
        data = await state.get_data()
        old_mes = data.get('mes')
        old_mes = await bot.edit_message_text(chat_id=message.chat.id, message_id=old_mes.message_id,
                                              text='‚ú®–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...')
        await state.update_data(mes=old_mes)
        user_id = message.from_user.id
        cursor = await conn.cursor()
        data = await state.get_data()
        old_mes = data.get('mes')
        await cursor.execute("SELECT lang FROM users WHERE user_id = ?", (user_id,))
        user_lang = await cursor.fetchone()
        for lang in languages:
            if user_lang[0] in lang:
                lang_user = lang[user_lang[0]]
        response = message.text
        response_text = f"–ü—Ä–∏–≤–µ—Ç! –ø—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –º–æ–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä {lang_user} —è–∑—ã–∫—É, —Å–∞–º —è –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–º–æ–≥–∏ –º–Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π {response}"
        ai_response = await generate_ai(response_text=response_text)
        processed_response = '\n'.join([
            f"<code>{line.lstrip('```').strip()}</code>" if line.strip().startswith('```') else
            f"<b>{line.replace('*', '').strip()}</b>" if '**' in line or '*' in line else
            f"<i>{line.lstrip('#').strip()}</i>" if line.strip().startswith('###') else
            line
            for line in ai_response.split('\n')
        ])
        kb = [
            [types.InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='back')]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            old_mes = await bot.edit_message_text(chat_id=message.chat.id, message_id=old_mes.message_id,
                                                  text=processed_response, reply_markup=keyboard)
            await state.clear()
            await state.update_data(mes=old_mes)
        except Exception as e:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            old_mes = await bot.send_message(chat_id=message.chat.id,
                                             text=processed_response, reply_markup=keyboard)
            await state.clear()
            await state.update_data(mes=old_mes)


async def generate_ai(response_text):
    model = "mistral-small-2409"
    client = Mistral(api_key=token_ai)
    txt = ''

    retries = 33
    delay = 1

    for attempt in range(1, retries + 1):
        try:
            response = await client.chat.stream_async(
                model=model,
                messages=[
                    {
                        "role": "user",
                        "content": response_text,
                    },
                ],
            )
            async for chunk in response:
                if chunk.data.choices[0].delta.content is not None:
                    txt += chunk.data.choices[0].delta.content
            return txt

        except Exception as e:
            if "Status 429" in str(e):
                print(
                    f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}: –û—à–∏–±–∫–∞ 429 - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(delay)
            else:
                raise e

    raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ 429 (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤).")


async def main():
    while True:
        try:
            await bot.delete_webhook(True)
            await base()
            await dp.start_polling(bot, skip_updates=True)
        except TelegramNetworkError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            await asyncio.sleep(5)

        except TelegramRetryAfter as a:
            print(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {a.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(a.retry_after)


if __name__ == "__main__":
    asyncio.run(main())
